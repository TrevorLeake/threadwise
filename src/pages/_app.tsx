// pages/_app.tsx

import type { AppProps } from 'next/app';
import type { Metadata } from "next";
import Head from 'next/head';
import { GA_MEASUREMENT_ID, pageview } from '@/lib/gtag';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import Script from 'next/script';
import { ThemeProvider } from '@/ThemeContext';

import "../globals.css";
import { merriweather, merriweather_sans, open_sans, playfair, roboto, spectral, spectralSC } from '@/styles/fonts';
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// const jsonLd = {
//   "@context": "https://schema.org",
//   "@type": "Person",
//   "name": "Ada Lovelace",
//   "url": "https://adalovelace.dev",
//   "sameAs": [
//     "https://twitter.com/ada",
//     "https://github.com/ada"
//   ]
// };


// import App, { Container } from 'next/app';
import { DefaultSeo } from 'next-seo';

// import your default seo configuration
// import SEO from '../next-seo.config';

export default function App({ Component, pageProps }: AppProps) {


  const router = useRouter();

  useEffect(() => {
    const handleRouteChange = async (url:string) => {
      await pageview(url);
    };

    router.events.on('routeChangeComplete', handleRouteChange);

    // For initial page load:
    pageview(window.location.pathname);

    return () => {
      router.events.off('routeChangeComplete', handleRouteChange);
    };
  }, [router.events]);


  const [gtagLoaded, setGtagLoaded] = useState(false);


  const fonts = [playfair, merriweather, merriweather_sans, roboto, open_sans, spectral, spectralSC];

  const fontClassName = fonts.map(f => f.variable).join(' ')
  console.log(fontClassName)
  return <main className={fontClassName}>
      <>
        {/* Google Analytics */}
        {/* <Script
          strategy="afterInteractive"
          src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}
        /> */}

      <Script
        strategy="afterInteractive"
        
        src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}
        onLoad={() => {
          setGtagLoaded(true);
          console.log('GA script loaded');
        }}
      />


      {gtagLoaded && (
        <Script
          id="gtag-init"
          strategy="afterInteractive"
          dangerouslySetInnerHTML={{
            __html: `
              window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              window.gtag = gtag;
              gtag('js', new Date());
              gtag('config', '${GA_MEASUREMENT_ID}', {
                page_path: window.location.pathname,
              });
            `,
          }}
        />
      )}        
        {/* Ads
        <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`} />
        <script dangerouslySetInnerHTML={{
          __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '${GA_MEASUREMENT_ID}');
          `
        }} /> */}


        <DefaultSeo
          openGraph={{
            type: 'website',
            locale: 'en_IE',
            url: 'https://www.leake.dev/',
            siteName: 'Leake.Dev',
          }}
          twitter={{
            handle: '@trevorleake',
            site: '@',
            cardType: 'summary_large_image',
          }}
        />

        {/* <link rel="icon" type="image/svg+xml" href="/block.svg" /> */}


        {/* Favicon */}
        {/* <link rel="icon" href="/block.svg" /> */}

      </>
      <ThemeProvider>
        <Component {...pageProps} />
      </ThemeProvider>
    </main>
}

